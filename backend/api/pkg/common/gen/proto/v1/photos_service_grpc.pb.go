// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/v1/photos_service.proto

package pbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhotosService_CheckHashPhoto_FullMethodName = "/pb.v1.PhotosService/CheckHashPhoto"
	PhotosService_UploadPhoto_FullMethodName    = "/pb.v1.PhotosService/UploadPhoto"
)

// PhotosServiceClient is the client API for PhotosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotosServiceClient interface {
	CheckHashPhoto(ctx context.Context, in *CheckHashPhotoRequest, opts ...grpc.CallOption) (*CheckHashPhotoResponse, error)
	UploadPhoto(ctx context.Context, in *UploadPhotoRequest, opts ...grpc.CallOption) (*UploadPhotoResponse, error)
}

type photosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotosServiceClient(cc grpc.ClientConnInterface) PhotosServiceClient {
	return &photosServiceClient{cc}
}

func (c *photosServiceClient) CheckHashPhoto(ctx context.Context, in *CheckHashPhotoRequest, opts ...grpc.CallOption) (*CheckHashPhotoResponse, error) {
	out := new(CheckHashPhotoResponse)
	err := c.cc.Invoke(ctx, PhotosService_CheckHashPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosServiceClient) UploadPhoto(ctx context.Context, in *UploadPhotoRequest, opts ...grpc.CallOption) (*UploadPhotoResponse, error) {
	out := new(UploadPhotoResponse)
	err := c.cc.Invoke(ctx, PhotosService_UploadPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotosServiceServer is the server API for PhotosService service.
// All implementations should embed UnimplementedPhotosServiceServer
// for forward compatibility
type PhotosServiceServer interface {
	CheckHashPhoto(context.Context, *CheckHashPhotoRequest) (*CheckHashPhotoResponse, error)
	UploadPhoto(context.Context, *UploadPhotoRequest) (*UploadPhotoResponse, error)
}

// UnimplementedPhotosServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPhotosServiceServer struct {
}

func (UnimplementedPhotosServiceServer) CheckHashPhoto(context.Context, *CheckHashPhotoRequest) (*CheckHashPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHashPhoto not implemented")
}
func (UnimplementedPhotosServiceServer) UploadPhoto(context.Context, *UploadPhotoRequest) (*UploadPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPhoto not implemented")
}

// UnsafePhotosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotosServiceServer will
// result in compilation errors.
type UnsafePhotosServiceServer interface {
	mustEmbedUnimplementedPhotosServiceServer()
}

func RegisterPhotosServiceServer(s grpc.ServiceRegistrar, srv PhotosServiceServer) {
	s.RegisterService(&PhotosService_ServiceDesc, srv)
}

func _PhotosService_CheckHashPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHashPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosServiceServer).CheckHashPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosService_CheckHashPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosServiceServer).CheckHashPhoto(ctx, req.(*CheckHashPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosService_UploadPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosServiceServer).UploadPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosService_UploadPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosServiceServer).UploadPhoto(ctx, req.(*UploadPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotosService_ServiceDesc is the grpc.ServiceDesc for PhotosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.v1.PhotosService",
	HandlerType: (*PhotosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHashPhoto",
			Handler:    _PhotosService_CheckHashPhoto_Handler,
		},
		{
			MethodName: "UploadPhoto",
			Handler:    _PhotosService_UploadPhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/photos_service.proto",
}
