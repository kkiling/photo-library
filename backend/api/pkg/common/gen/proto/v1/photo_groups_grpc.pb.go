// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/v1/photo_groups.proto

package pbv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhotoGroupsService_GetPhotoGroups_FullMethodName    = "/pb.v1.PhotoGroupsService/GetPhotoGroups"
	PhotoGroupsService_GetPhotoGroup_FullMethodName     = "/pb.v1.PhotoGroupsService/GetPhotoGroup"
	PhotoGroupsService_SetMainPhotoGroup_FullMethodName = "/pb.v1.PhotoGroupsService/SetMainPhotoGroup"
)

// PhotoGroupsServiceClient is the client API for PhotoGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoGroupsServiceClient interface {
	GetPhotoGroups(ctx context.Context, in *GetPhotoGroupsRequest, opts ...grpc.CallOption) (*GetPhotoGroupsResponse, error)
	GetPhotoGroup(ctx context.Context, in *GetPhotoGroupRequest, opts ...grpc.CallOption) (*GetPhotoGroupResponse, error)
	SetMainPhotoGroup(ctx context.Context, in *SetMainPhotoGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type photoGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoGroupsServiceClient(cc grpc.ClientConnInterface) PhotoGroupsServiceClient {
	return &photoGroupsServiceClient{cc}
}

func (c *photoGroupsServiceClient) GetPhotoGroups(ctx context.Context, in *GetPhotoGroupsRequest, opts ...grpc.CallOption) (*GetPhotoGroupsResponse, error) {
	out := new(GetPhotoGroupsResponse)
	err := c.cc.Invoke(ctx, PhotoGroupsService_GetPhotoGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoGroupsServiceClient) GetPhotoGroup(ctx context.Context, in *GetPhotoGroupRequest, opts ...grpc.CallOption) (*GetPhotoGroupResponse, error) {
	out := new(GetPhotoGroupResponse)
	err := c.cc.Invoke(ctx, PhotoGroupsService_GetPhotoGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoGroupsServiceClient) SetMainPhotoGroup(ctx context.Context, in *SetMainPhotoGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhotoGroupsService_SetMainPhotoGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoGroupsServiceServer is the server API for PhotoGroupsService service.
// All implementations should embed UnimplementedPhotoGroupsServiceServer
// for forward compatibility
type PhotoGroupsServiceServer interface {
	GetPhotoGroups(context.Context, *GetPhotoGroupsRequest) (*GetPhotoGroupsResponse, error)
	GetPhotoGroup(context.Context, *GetPhotoGroupRequest) (*GetPhotoGroupResponse, error)
	SetMainPhotoGroup(context.Context, *SetMainPhotoGroupRequest) (*emptypb.Empty, error)
}

// UnimplementedPhotoGroupsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPhotoGroupsServiceServer struct {
}

func (UnimplementedPhotoGroupsServiceServer) GetPhotoGroups(context.Context, *GetPhotoGroupsRequest) (*GetPhotoGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoGroups not implemented")
}
func (UnimplementedPhotoGroupsServiceServer) GetPhotoGroup(context.Context, *GetPhotoGroupRequest) (*GetPhotoGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoGroup not implemented")
}
func (UnimplementedPhotoGroupsServiceServer) SetMainPhotoGroup(context.Context, *SetMainPhotoGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMainPhotoGroup not implemented")
}

// UnsafePhotoGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoGroupsServiceServer will
// result in compilation errors.
type UnsafePhotoGroupsServiceServer interface {
	mustEmbedUnimplementedPhotoGroupsServiceServer()
}

func RegisterPhotoGroupsServiceServer(s grpc.ServiceRegistrar, srv PhotoGroupsServiceServer) {
	s.RegisterService(&PhotoGroupsService_ServiceDesc, srv)
}

func _PhotoGroupsService_GetPhotoGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoGroupsServiceServer).GetPhotoGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoGroupsService_GetPhotoGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoGroupsServiceServer).GetPhotoGroups(ctx, req.(*GetPhotoGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoGroupsService_GetPhotoGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoGroupsServiceServer).GetPhotoGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoGroupsService_GetPhotoGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoGroupsServiceServer).GetPhotoGroup(ctx, req.(*GetPhotoGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoGroupsService_SetMainPhotoGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMainPhotoGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoGroupsServiceServer).SetMainPhotoGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoGroupsService_SetMainPhotoGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoGroupsServiceServer).SetMainPhotoGroup(ctx, req.(*SetMainPhotoGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoGroupsService_ServiceDesc is the grpc.ServiceDesc for PhotoGroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoGroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.v1.PhotoGroupsService",
	HandlerType: (*PhotoGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhotoGroups",
			Handler:    _PhotoGroupsService_GetPhotoGroups_Handler,
		},
		{
			MethodName: "GetPhotoGroup",
			Handler:    _PhotoGroupsService_GetPhotoGroup_Handler,
		},
		{
			MethodName: "SetMainPhotoGroup",
			Handler:    _PhotoGroupsService_SetMainPhotoGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/photo_groups.proto",
}
